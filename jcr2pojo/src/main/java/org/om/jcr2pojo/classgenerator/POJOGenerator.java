/*
 * Copyright 2012 Tom Everett
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. 
 */
package org.om.jcr2pojo.classgenerator;

import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.Date;

import javax.jcr.PropertyType;

import org.om.core.impl.persistence.jcr.util.PropertyTypeToClass;
import org.om.jcr2pojo.classmapping.ClassMapping;
import org.om.jcr2pojo.classmapping.FieldMapping;
import org.om.jcr2pojo.exception.JCR2POJOException;

/**
 * @author tome
 */
public class POJOGenerator {
	/**
	 * generate a POJO
	 */
	public void generatePOJO(String namespace, ClassMapping classMapping, OutputStream outputStream) throws JCR2POJOException {
		try {
			/*
			 * writer
			 */
			final PrintWriter writer = new PrintWriter(new OutputStreamWriter(outputStream));
			/*
			 * namespace
			 */
			writer.println("package " + namespace + ";");
			writer.println();
			/*
			 * mr. kulzer's magic imports
			 */
			writer.println("import org.om.core.api.annotation.Entity;");
			writer.println("import org.om.core.api.annotation.Id;");
			writer.println("import org.om.core.api.annotation.Property;");
			writer.println();
			/*
			 * some commentary at the top
			 */
			writer.println("/*");
			writer.println("* <p>This is a generated class</p>");
			writer.println("* <p>Do not edit this file, changes will be overwritten!</p>");
			writer.println("* <p>Generated: " + new Date().toString() + "</p>");
			writer.println("* <p>Generated on: " + java.net.InetAddress.getLocalHost().getHostName() + "</p>");
			writer.println("* <p>Generated by: " + System.getProperty("user.name") + "</p>");
			writer.println("*/");
			/*
			 * declare the class
			 */
			writer.println("@Entity");
			writer.println("public class " + classMapping.getName() + "{");
			writer.println();
			/*
			 * walk fields
			 */
			final FieldMapping[] fields = classMapping.getFields();
			if (null != fields) {

				for (int i = 0; i < fields.length; i++) {
					final FieldMapping mapping = fields[i];
					/*
					 * typename
					 */
					final Class<?> type = mapping.getType();
					final String typename = type.getSimpleName();
					final String fieldname = mapping.getName();
					/*
					 * declare property. for now, as string.
					 */
					writer.println("\t/**");
					writer.println("\t * " + mapping.getName() + " (PropertyType."
							+ PropertyType.nameFromValue(PropertyTypeToClass.getTypeForClass(mapping.getType())) + ")");
					writer.println("\t */");
					writer.println("\t@Property");
					writer.println("\tprivate " + typename + " " + fieldname + ";");
					writer.println();
					/*
					 * getter
					 */
					writer.println("\tpublic " + typename + " get" + getMungedFieldName(fieldname) + "()");
					writer.println("\t{return " + fieldname + ";}");
					writer.println();
					/*
					 * setter
					 */
					writer.println("\tpublic " + typename + " set" + getMungedFieldName(fieldname) + "(" + typename + " " + fieldname + ")");
					writer.println("\t{this." + fieldname + "=" + fieldname + ";}");
					writer.println();
				}
			}
			/*
			 * end of class
			 */
			writer.println("}");
			/*
			 * done
			 */
			writer.flush();
			writer.close();
		} catch (final Exception e) {
			throw new JCR2POJOException("Exception in generatePOJO", e);
		}
	}

	/**
	 * *sigh*
	 */
	private String getMungedFieldName(String fieldName) {
		final char[] b = fieldName.toCharArray();
		b[0] = Character.toUpperCase(b[0]);
		return new String(b);
	}
}
